* Basic Interface Settings
These are setting that do not depend on packages and are built-in enhancements to the UI.

** Check Mac or Windows
#+BEGIN_SRC emacs-lisp
(defconst *is-a-mac* (eq system-type 'darwin))
(defconst *is-a-win* (eq system-type 'windows-nt))
#+END_SRC

** Looks
*** Remove lame startup screen
We use an actual replacement for it, keep reading or head directly to =dashboard=.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

*** Empty scratch buffer
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "")
#+END_SRC

*** Disable menus and scrollbars
If you like using any of those, change =-1= to =1=.
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode 1)
(scroll-bar-mode -1)
#+END_SRC

*** Set the cursor shape
#+BEGIN_SRC emacs-lisp :tangle no
  ;; Bar cursor
  (setq-default cursor-type '(bar . 1))
  ;; Don't blink the cursor
  (blink-cursor-mode -1)
#+END_SRC

*** Disable bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

*** Set UTF-8 encoding
#+BEGIN_SRC emacs-lisp 
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (when *is-a-win*
    (set-selection-coding-system 'utf-16-le))
  (when *is-a-mac*
    (set-selection-coding-system 'utf-8))
  (prefer-coding-system 'utf-8)
#+END_SRC

*** Highligh current line
=hl-line= is awesome! It's not very awesome in the terminal version of emacs though, so we don't use that.
#+BEGIN_SRC emacs-lisp :tangle no
(when window-system (global-hl-line-mode t))
#+END_SRC

*** Pretty symbols
Changes =lambda= to an actual symbol and a few others as well, only in the GUI version though.
#+BEGIN_SRC emacs-lisp
;; (when window-system (global-prettify-symbols-mode t))
#+END_SRC

*** Front Size

#+BEGIN_SRC emacs-lisp
;; Set front size, the value is in 1/10pt, so 160=16pt
(when *is-a-mac*
  (set-face-attribute 'default nil :height 160))

(when *is-a-win*
  (set-face-attribute 'default nil :height 120)
  (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
  )
#+END_SRC

*** Stretch cursor
Make Cursor the width of the character it is nder full width of a TAB
#+BEGIN_SRC emacs-lisp
(setq x-stretch-cursor t)
#+END_SRC

*** Add spacing between english and chinese word
#+BEGIN_SRC emacs-lisp
  (use-package pangu-spacing
    :ensure t
    :init
    (global-pangu-spacing-mode 1))
#+END_SRC

*** Show line number in left
#+BEGIN_SRC emacs-lisp
;;(add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC

*** Toggle line spacing command
#+BEGIN_SRC emacs-lisp
  (defun toggle-line-spacing ()
    "Toggle line spacing between no extra space to extra half line height."
    (interactive)
    (if line-spacing
        (setq line-spacing nil)
      (setq line-spacing 0.5))
    (redraw-frame (selected-frame)))

  (defun default-org-line-spacing ()
    "set default org mode line spacing"
;;    (interactive)
    (setq line-spacing 0.5)
    )

  (add-hook 'org-mode-hook 'default-org-line-spacing)
#+END_SRC

** Functionality
*** Disable backups and auto-saves
I don't use either, you might want to turn those from =nil= to =t= if you do.
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC

*** Change yes-or-no questions into y-or-n questions
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** Emacs Server
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC
** User Info

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Marco Chiu")
(setq user-mail-address "chiumarco@gmail.com")
#+END_SRC

** Keybinding for open config.org
#+BEGIN_SRC emacs-lisp
  (defun find-config ()
    "Edit config.org"
    (interactive)
    (find-file "~/.emacs.d/config.org"))

  (global-set-key (kbd "C-c e") 'find-config)
#+END_SRC

* Themes

** Leuven
Default theme.
#+BEGIN_SRC emacs-lisp
(load-theme 'leuven t)
#+END_SRC

** Function to toggle between light and dark

#+BEGIN_SRC emacs-lisp
    ;; Ensure that themes will be applied even if they have not been customized
    (defun reapply-themes ()
      "Forcibly load the themes listed in `custom-enabled-themes'."
      (dolist (theme custom-enabled-themes)
        (unless (custom-theme-p theme)
          (load-theme theme)))
      (custom-set-variables `(custom-enabled-themes (quote ,custom-enabled-themes))))

    (add-hook 'after-init-hook 'reapply-themes)

    (defun light ()
      "Activate a light color theme."
      (interactive)
      (load-theme 'leuven t)
      (reapply-themes)
      )

    (defun dark ()
      "Activate a dark color theme."
      (interactive)
      (load-theme 'leuven-dark t)
      (reapply-themes)
      )
#+END_SRC

* Modeline
** Spaceline
Powerline theme from Spacemacs
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
      (setq spaceline-buffer-encoding-abbrev-p nil)
      (setq spaceline-line-column-p nil)
      (setq spaceline-line-p nil)
      (setq powerline-default-separator (quote arrow))
      (spaceline-spacemacs-theme))
#+END_SRC

** Cursor position
Show the current line and column for your cursor.
#+BEGIN_SRC emacs-lisp
  (line-number-mode t)
  (column-number-mode t)
#+END_SRC

** Clock
If you prefer the 12hr-format, change the variable to =nil= instead of =t=.

*** Time format
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M - %d %B %Y")
#+END_SRC

*** Enabling the mode
This turns on the clock globally.
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC

** Diminishing modes
The package =diminish= disables modes on the mode line but keeps
them running, it just prevents them from showing up and taking up space.

#+BEGIN_SRC emacs-lisp
    (use-package diminish
      :ensure t
      :init
      (diminish 'which-key-mode)
      ;(diminish 'linum-relative-mode)
      )
#+END_SRC

* Projectile
Projectile is an awesome project manager, mostly because it recognizes directories
with a =.git= directory as projects and helps you manage them accordingly.

** Enable projectile globally
This makes sure that everything can be a project.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
      (projectile-mode 1))
#+END_SRC

* Dashboard
This is your new startup screen, together with projectile it works in unison and
provides you with a quick look into your latest projects and files.
Change the welcome message to whatever string you want and
change the numbers to suit your liking, I find 5 to be enough.

#+BEGIN_SRC emacs-lisp
  ;; (use-package dashboard
  ;;   :ensure t
  ;;   :config
  ;;     (dashboard-setup-startup-hook)
  ;;     (setq dashboard-banner-logo-title "Welcome to Emacs!")
  ;;     (setq dashboard-startup-banner 'official)
  ;;     (setq dashboard-items '((recents  . 5)
  ;;                             (projects . 5)
  ;;                             (bookmark . 5)
  ;;                             (agenda   . 5)))
  ;;     (add-to-list 'dashboard-items '(agenda) t))
#+END_SRC

* File manager

** Treemacs - a tree layout file explorer for Emacs
To show icon in treemacs in Windows, need install dependencies as well (=emacs-25-x86_64-deps.zip=).
#+BEGIN_SRC emacs-lisp
      (use-package treemacs
        :ensure t
        :defer t
        :config
        (progn
          (setq treemacs-follow-after-init t
                treemacs-width 35
                treemacs-indentation 2
                treemacs-collapse-dirs (if (executable-find "python") 3 0)
                treemacs-silent-refresh nil
                treemacs-change-root-without-asking nil
                treemacs-sorting 'alphabetic-desc
                treemacs-show-hidden-files t
                treemacs-never-persist nil
                treemacs-is-never-other-window nil
                treemacs-goto-tag-strategy 'refetch-index)

          (treemacs-follow-mode t)
          (treemacs-filewatch-mode t)
          (pcase (cons (not (null (executable-find "git")))
                       (not (null (executable-find "python3"))))
            (`(t . t)
             (treemacs-git-mode 'extended))
            (`(t . _)
             (treemacs-git-mode 'simple))))
        :bind
        (:map global-map
              ([f8] . treemacs-toggle)))

      (use-package treemacs-projectile
        :defer t
        :ensure t
        :config
            (setq treemacs-header-function #'treemacs-projectile-create-header)
        :bind (:map global-map
                    ([f9] . treemacs-projectile)
                    ([f9] . treemacs-projectile-toggle)))
#+END_SRC

** Dired

* Moving around emacs

** Ivy
Ivy, a generic completion mechanism for Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t)
#+END_SRC

** Counsel
Counsel, a collection of Ivy-enhanced versions of common Emacs commands.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    ;; pullup menu for kill ring
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line))
  )
#+END_SRC

** Swiper
Swiper, an Ivy-enhanced alternative to isearch.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history))
#+END_SRC

** scrolling and why does the screen move
I don't know to be honest, but this little bit of code makes scrolling with emacs a lot nicer.
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC

** which-key
Emacs package that displays available keybindings in popup.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
      (which-key-mode))
#+END_SRC

** For windows operation
*** Winner Mode
Winner Mode is a global minor mode. When activated, it allows you to =undo= (and =redo=) changes in the window configuration with the key commands =C-c left= and =C-c right=.

#+BEGIN_SRC emacs-lisp
(require 'winner)
(winner-mode 1)
#+END_SRC

*** Following window splits
After you split a window, your focus remains in the previous one.
This annoyed me so much I wrote these two, they take care of it.
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

*** Windows move
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-[") 'windmove-up)
(global-set-key (kbd "M-/") 'windmove-down)
(global-set-key (kbd "M-'") 'windmove-right)
(global-set-key (kbd "M-;") 'windmove-left)
(global-set-key (kbd "M-:") 'comment-line)
#+END_SRC

** Buffers
*** Always murder current buffer
Doing =C-x k= should kill the current buffer at all times.
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    "Kills the current buffer."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

*** Kill buffers without asking for confirmation
#+BEGIN_SRC emacs-lisp
(setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+END_SRC

*** Turn switch-to-buffer into ibuffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

**** Defining filter groups
#+BEGIN_SRC emacs-lisp
    (setq ibuffer-saved-filter-groups
          '(("home"
            ("emacs-config" (or (filename . ".emacs.d")
                                (filename . "emacs-config")))
             ("Org" (or (mode . org-mode)
                        (filename . "OrgMode")))
             ("code" (filename . "code"))
             ("Web Dev" (or (mode . html-mode)
                            (mode . css-mode)))
             ("Subversion" (name . "\*svn"))
             ("Magit" (name . "\*magit"))
             ("Markdown" (filename . ".md"))
             ("Help" (or (name . "\*Help\*")
                         (name . "\*Apropos\*")
                         (name . "\*info\*"))))))
  (add-hook 'ibuffer-mode-hook
            '(lambda ()
               (ibuffer-auto-mode 1)
               (ibuffer-switch-to-saved-filter-groups "home")))
  (setq ibuffer-show-empty-filter-groups nil)
#+END_SRC

**** expert-mode
If you feel like you know how ibuffer works and need not to be asked for confirmation after every serious command, enable this as follows.
#+BEGIN_SRC emacs-lisp
;; (setq ibuffer-expert t)
#+END_SRC

*** close-all-buffers
It's one of those things where I genuinely have to wonder why there is no built in functionality for it.
Once in a blue moon I need to kill all buffers, and having ~150 of them open would mean I'd need to spend a few too many
seconds doing this than I'd like, here's a solution.

This can be invoked using =C-M-s-k=. This keybinding makes sure you don't hit it unless you really want to.
#+BEGIN_SRC emacs-lisp
  (defun close-all-buffers ()
    "Kill all buffers without regard for their origin."
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'close-all-buffers)
#+END_SRC

* Minor conveniences

** Beacon
While changing buffers or workspaces, the first thing you do is look for your cursor.
Unless you know its position, you can not move it efficiently. Every time you change
buffers, the current position of your cursor will be briefly highlighted now.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
      (beacon-mode 1))
#+END_SRC

** Rainbow delimiters
Colors parentheses and other delimiters depending on their depth, useful for any language using them,
especially lisp.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

** Popup menu
Instead of GUI x-popup-menu, I prefer a small minibuffer, it's easier to select options this way.
#+BEGIN_SRC emacs-lisp
  (use-package ace-popup-menu
    :ensure t
    :init
      (ace-popup-menu-mode 1))
#+END_SRC

* Kill ring

** popup-kill-ring
Out of all the packages I tried out, this one, being the simplest, appealed to me most.
With a simple M-y you can now browse your kill-ring like browsing autocompletion items.
C-n and C-p totally work for this.
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC

* Completion
Be it for code or prose, completion is a must.

** company-mode
After messing around with =auto-completion= for a while I decided to drop it
in favor of =company=, and it turns out to have been a great decision.

*** Global mode
I like having it enabled globally myself, so thats what I do.
I set the delay for company mode to kick in to half a second, I also make sure that
it starts doing its magic after typing in only 2 characters.

I prefer =C-n= and =C-p= to move around the items, so I remap those accordingly.
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
      (setq company-dabbrev-downcase 0)
      (setq company-idle-delay 0)
      (setq company-minimum-prefix-length 3)
    :init
      (add-hook 'after-init-hook 'global-company-mode))

  (with-eval-after-load 'company
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous))
#+END_SRC

** electric
If you write any code, you may enjoy this.
Typing the first character in a set of 2, completes the second one after your cursor.
Opening a bracket? It's closed for you already. Quoting something? It's closed for you already.

You can easily add and remove pairs yourself, have a look.
#+BEGIN_SRC emacs-lisp
(setq electric-pair-pairs '(
                           (?\{ . ?\})
                           (?\( . ?\))
                           (?\[ . ?\])
                           ))
#+END_SRC

And now to enable it
#+BEGIN_SRC emacs-lisp
(electric-pair-mode t)
#+END_SRC

** YASnippet
YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all)
    (yas-global-mode 1))
#+END_SRC
** Auto-YASnippet
#+BEGIN_SRC emacs-lisp
  (use-package auto-yasnippet
    :ensure t)
#+END_SRC

* Programming

** Useful function
*** Comment Block
#+BEGIN_SRC emacs-lisp
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;; Full width comment box                                                 ;;
   ;; from http://irreal.org/blog/?p=374                                     ;;
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (defun mc-comment-box (b e)
    "Draw a box comment around the region but arrange for the region to extend to at least the fill column. Place the point after the comment box."

   (interactive "r")

   (let ((e (copy-marker e t)))
     (goto-char b)
     (end-of-line)
     (insert-char ?  (- fill-column (current-column)))
     (comment-box b e 1)
     (goto-char e)
     (set-marker e nil)))

  ;; (global-set-key (kbd "C-c b b") 'bjm-comment-box)
#+END_SRC
** ediff
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(ediff-diff-options "-w")
   '(ediff-split-window-function (quote split-window-horizontally))
   '(ediff-window-setup-function (quote ediff-setup-windows-plain)))
  (winner-mode)
  (add-hook 'ediff-after-quit-hook-internal 'winner-undo)

  ;; (when *is-a-win*
  ;;   (progn
  ;;     (setq diff-path "C:/Program Files (x86)/GnuWin32/bin/")
  ;;     (setenv "PATH"
  ;;             (concat diff-path ";"))
  ;;     (setq exec-path
  ;;           '(diff-path))))
#+END_SRC

** Aggressive-indent-mode
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :config
    (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
    (add-hook 'python-mode-hook #'aggressive-indent-mode))
#+END_SRC
** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

Use vmd to live time preview markdown file.
Need install =Node.js= and =vmd=.
#+BEGIN_SRC 
npm install -g vmd
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (expand-file-name "packages/vmd-mode" user-emacs-directory))
  (when *is-a-mac*
    (setenv "PATH" (concat "/usr/local/bin:/usr/bin:" (getenv "PATH")))
    (setq exec-path (append '("/usr/local/bin" "/usr/bin") exec-path)))
  (require 'vmd-mode)
#+END_SRC

** Matlab

#+BEGIN_SRC emacs-lisp
  (use-package matlab-mode
    :ensure t
    :mode ("\\.m$" . matlab-mode)
    :bind (:map matlab-shell-mode-map
                ("C-c C-c" . term-interrupt-subjob))
    :init
    (setq matlab-shell-command "/Applications/MATLAB_R2017a.app/bin/matlab"
          matlab-indent-function t)
    (eval-after-load 'matlab
      '(add-to-list 'matlab-shell-command-switches "-nosplash")))
#+END_SRC

Function to open a MATLAB command line in a vertical split.
#+BEGIN_SRC emacs-lisp
  (defun mc/matlab-shell-here ()
    "opens up a new matlab shell in the directory associated with the current buffer's file."
    (interactive)
    (split-window-right)
    (other-window 1)
    (matlab-shell))
#+END_SRC

** Python
Improve python mode indent.
#+BEGIN_SRC emacs-lisp
  (defun python-return()
    (interactive)
    (if (= (point) (point-at-bol))
        (insert "\n")
      (newline)
      (indent-for-tab-command)))

  (defun vmacs-python-mode-hook ()
    ;; (when (fboundp 'jedi:setup) (jedi:setup))
    (define-key python-mode-map  (kbd "RET") 'python-return))

  (add-hook 'python-mode-hook 'vmacs-python-mode-hook)
#+END_SRC

** Lua
lua-mode is a major mode for editing Lua sources in Emacs.
#+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :ensure t
  :mode ("\\.lua$'" . markdown-mode))
#+END_SRC

* Git integration

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summary-max-length 50))
#+END_SRC

* Mu4e

#+BEGIN_SRC emacs-lisp
    (when *is-a-mac*
      (require 'epa-file)
      (custom-set-variables '(epg-gpg-program  "/usr/local/bin/gpg"))
      (epa-file-enable)

      (defun offlineimap-get-password (host port)
        (require 'netrc)
        (let* ((netrc (netrc-parse (expand-file-name "~/.authinfo.gpg")))
               (hostentry (netrc-machine netrc host port port)))
          (when hostentry (netrc-get hostentry "password"))))

      (require 'mu4e)                      ; load mu4e
      ;; Use mu4e as default mail agent
      (setq mail-user-agent 'mu4e-user-agent)
      ;; Mail folder set to ~/Maildir
      (setq mu4e-maildir "~/Maildir")         ; NOTE: should not be symbolic link
      ;; Fetch mail by offlineimap
      (setq mu4e-get-mail-command "offlineimap")
      ;; Fetch mail in 300 sec interval
      (setq mu4e-update-interval 300)

      ;; (setq mu4e-hide-index-messages t)


      (setq mu4e-contexts
     `( ,(make-mu4e-context
         :name "Gmail"
         :match-func (lambda (msg) (when msg
           (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
         :vars '(
           (mu4e-sent-folder . "/Gmail/[Gmail].Sent Mail")
           (mu4e-trash-folder . "/Gmail/[Gmail].Trash")
           (mu4e-drafts-folder . "/Gmail/[Gmail].Drafts")
           ))
       ,(make-mu4e-context
         :name "Hotmail"
         :match-func (lambda (msg) (when msg
           (string-prefix-p "/Hotmail" (mu4e-message-field msg :maildir))))
         :vars '(
           (mu4e-sent-folder . "/Hotmail/Sent")
           (mu4e-trash-folder . "/Hotmail/Deleted")
           (mu4e-drafts-folder . "/Hotmail/Drafts")
           ))
       ,(make-mu4e-context
         :name "Yahoo"
         :match-func (lambda (msg) (when msg
           (string-prefix-p "/Yahoo" (mu4e-message-field msg :maildir))))
         :vars '(
           (mu4e-sent-folder . "/Yahoo/Sent")
           (mu4e-trash-folder . "/Yahoo/Deleted Items")
           (mu4e-drafts-folder . "/Yahoo/Draft")
           ))
       ))

      ;; the maildirs you use frequently; access them with 'j' ('jump')
      (setq   mu4e-maildir-shortcuts
              '(("/Gmail/INBOX"               . ?i)
                ("/Gmail/[Gamil].Sent Mail"   . ?s)
                ("/Gmail/[Gmail].Trash"       . ?t)))

      ;; give me ISO(ish) format date-time stamps in the header list
      (setq mu4e-headers-date-format "%Y-%m-%d %H:%M")
      ;; the headers to show in the headers list -- a pair of a field
      ;; and its width, with `nil' meaning 'unlimited'
      ;; (better only use that for the last field.
      ;; These are the defaults:
      (setq mu4e-headers-fields
            '( (:date          .  20)    ;; alternatively, use :human-date
               (:flags         .   5)
               (:from          .  25)
               (:subject       .  nil))) ;; alternatively, use :thread-subject

      (require 'mu4e-contrib)
      (setq mu4e-html2text-command 'mu4e-shr2text)
      ;; try to emulate some of the eww key-bindings
      (add-hook 'mu4e-view-mode-hook
                (lambda ()
                  (local-set-key (kbd "<tab>") 'shr-next-link)
                  (local-set-key (kbd "<backtab>") 'shr-previous-link)))

      ;; Call EWW to display HTML messages
      (defun jcs-view-in-eww (msg)
        (eww-browse-url (concat "file://" (mu4e~write-body-to-html msg))))
      ;; Arrange to view messages in either the default browser or EWW
      (add-to-list 'mu4e-view-actions '("ViewInBrowser" . mu4e-action-view-in-browser) t)
      (add-to-list 'mu4e-view-actions '("Eww view" . jcs-view-in-eww) t)

      ;; use org structures and tables in message mode
      (add-hook 'message-mode-hook 'turn-on-orgtbl)
      (add-hook 'message-mode-hook 'turn-on-orgstruct++)


      ;; Set format=flowed
      ;; mu4e sets up visual-line-mode and also fill (M-q) to do the right thing
      ;; each paragraph is a single long line; at sending, emacs will add the
      ;; special line continuation characters.
      (setq mu4e-compose-format-flowed t)

      ;; every new email composition gets its own frame! (window)
      ;;(setq mu4e-compose-in-new-frame t)



      ;; show full addresses in view message (instead of just names)
      ;; toggle per name with M-RET
      (setq mu4e-view-show-addresses t)


      (setq mu4e-view-show-images t)

      ;; SMTP setup
      (setq message-send-mail-function 'smtpmail-send-it
            smtpmail-stream-type 'starttls
            starttls-use-gnutls t)
      ;; Personal info
      (setq user-full-name "Marco Chiu")          ; FIXME: add your info here
      (setq user-mail-address "chiumarco@gmail.com"); FIXME: add your info here
      ;; gmail setup
      (setq smtpmail-smtp-server "smtp.gmail.com")
      (setq smtpmail-smtp-service 587)
      (setq smtpmail-smtp-user "chiumarco@gmail.com") ; FIXME: add your gmail addr here

      (setq mu4e-compose-signature "Sent from my emacs.")

      ;; don't keep message buffers after sent message
      (setq message-kill-buffer-on-exit t)

      (global-set-key (kbd "<f6>") 'mu4e)

      )
#+END_SRC

** mu4e-alert
#+BEGIN_SRC emacs-lisp
  (when *is-a-mac*
    (use-package mu4e-alert
      :ensure t
      :after mu4e
      :init
      (setq mu4e-alert-interesting-mail-query
            (concat
             "flag:unread maildir:/Exchange/INBOX "
             "OR "
             "flag:unread maildir:/Gmail/INBOX"
             ))
      (mu4e-alert-enable-mode-line-display)
      (defun gjstein-refresh-mu4e-alert-mode-line ()
        (interactive)
        (mu4e~proc-kill)
        (mu4e-alert-enable-mode-line-display)
        )
      (run-with-timer 0 60 'gjstein-refresh-mu4e-alert-mode-line)    )
    )
#+END_SRC

** mu4e-maildirs-extension
This extension adds a maildir summary in =mu4e-main-view=.

#+BEGIN_SRC emacs-lisp
  (when *is-a-mac*
    (use-package mu4e-maildirs-extension
      :ensure t
      :after mu4e
      :init (mu4e-maildirs-extension)
      )
    )
#+END_SRC
* Web
** EWW

#+BEGIN_SRC emacs-lisp
(defun eww-render-current-buffer ()
Render HTML in the current buffer with EWW"
interactive)
beginning-of-buffer)
eww-display-html 'utf8 (buffer-name)))
ND_SRC

 Makes eww more pleasant to use. Run it after eww buffer is loaded.
EGIN_SRC emacs-lisp
fun eww-more-readable ()
Makes eww more pleasant to use. Run it after eww buffer is loaded."
  (interactive)
  (setq eww-header-line-format nil)               ;; removes page title
  (setq mode-line-format nil)                     ;; removes mode-line
  (set-window-margins (get-buffer-window) 20 20)  ;; increases size of margins
  (redraw-display)                                ;; apply mode-line changes
  (eww-reload 'local))                            ;; apply eww-header changes
#+END_SRC

** Atomic-chrome
#+BEGIN_SRC emacs-lisp
  (use-package atomic-chrome
    :ensure t
    :config
    (atomic-chrome-start-server)
    (setq atomic-chrome-default-major-mode 'org-mode)
    (setq atomic-chrome-buffer-open-style 'frame))
#+END_SRC

* Org

** Common settings

#+BEGIN_SRC emacs-lisp
  ;(setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  ;; org ellipsis options, other than the default Go to Node...
  ;; not supported in common font, but supported in Symbola (my fall-back font) ⬎, ⤷, ⤵
  (setq org-ellipsis "⤵⤵⤵");; ⤵ ≫
  (setq org-footnote-auto-adjust t)
#+END_SRC

** Line wrapping
#+BEGIN_SRC emacs-lisp
    (add-hook 'org-mode-hook
              '(lambda ()
                 (visual-line-mode 1)))
#+END_SRC

** Org Table wrap to width
#+BEGIN_SRC emacs-lisp
  (defun org-table-wrap-to-width (width)
    "Wrap current column to WIDTH."
    (interactive (list (read-number "Enter column width: ")))
    (org-table-check-inside-data-field)
    (org-table-align)

    (let (cline (ccol (org-table-current-column)) new-row-count (more t))
      (org-table-goto-line 1)
      (org-table-goto-column ccol)

      (while more
        (setq cline (org-table-current-line))

        ;; Cut current field
        (org-table-copy-region (point) (point) 'cut)

        ;; Justify for width
        (setq org-table-clip 
              (mapcar 'list (org-wrap (caar org-table-clip) width nil)))

        ;; Add new lines and fill
        (setq new-row-count (1- (length org-table-clip)))
        (if (> new-row-count 0)
            (org-table-insert-n-row-below new-row-count)) 
        (org-table-goto-line cline)
        (org-table-goto-column ccol)
        (org-table-paste-rectangle)
        (org-table-goto-line (+ cline new-row-count))

        ;; Move to next line
        (setq more (org-table-goto-line (+ cline new-row-count 1)))
        (org-table-goto-column ccol))

      (org-table-goto-line 1)
      (org-table-goto-column ccol)))

  (defun org-table-insert-n-row-below (n)
    "Insert N new lines below the current."
    (let* ((line (buffer-substring (point-at-bol) (point-at-eol)))
           (new (org-table-clean-line line)))
      ;; Fix the first field if necessary
      (if (string-match "^[ \t]*| *[#$] *|" line)
          (setq new (replace-match (match-string 0 line) t t new)))
      (beginning-of-line 2)
      (setq new
        (apply 'concat (make-list n (concat new "\n"))))
      (let (org-table-may-need-update) (insert-before-markers new))  ;;; remove? 
      (beginning-of-line 0)
      (re-search-forward "| ?" (point-at-eol) t)
      (and (or org-table-may-need-update org-table-overlay-coordinates) ;;; remove? 
           (org-table-align))
      (org-table-fix-formulas "@" nil (1- (org-table-current-dline)) n)))
#+END_SRC
** Keybindings

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
#+END_SRC

** Org Bullets
Makes it all look a bit nicer, I hate looking at asterisks.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode)))
    (when *is-a-mac*
      (setq org-bullets-bullet-list '("✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥")))
    )
#+END_SRC

** Easy-to-add emacs-lisp template
Hitting tab after an "<el" in an org-mode file will create a template for elisp insertion.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp
  ;; Insert timestamp when TODO state changed into DONE state
  (setq org-log-done 'time)
  ;; Uses only one star and indents text to line with the heading:
  (setq org-startup-indented t)
  ;; Only one occurrence is shown, either today or the nearest into the future
  ;; (setq org-agenda-repeating-timestamp-show-all nil)
  (setq org-agenda-show-future-repeats nil)
  ;; Open agenda in current window
  (setq org-agenda-window-setup (quote current-window))
  ;; Warn me of any deadlines in next 7 days
  (setq org-deadline-warning-days 7)
  ;; Don't show tasks as scheduled if they are already shown as a deadline
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  ;; Don't give awarning colour to tasks with impending deadlines
  ;; if they are scheduled to be done
  (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
  ;; Don't show tasks that are scheduled or have deadlines in the
  ;; Normal todo list
  (setq org-agenda-todo-ignore-deadlines (quote all))
  (setq org-agenda-todo-ignore-scheduled (quote all))

  ;; ☛✘✔✘
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n)"  "|" "DONE(d)")
          (sequence "WAITING(w)" "INACTIVE(i)" "MEETING(m)" "|" "CANCELLED(c)" )))

  (require 'org-mobile)
#+END_SRC

** Org Mode File

#+BEGIN_SRC emacs-lisp
    (when *is-a-mac*
      (setq org-directory "~/Dropbox/Emacs/Org")
      (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg"))

    (when *is-a-win*
      (setq org-directory "C:/Users/Marco.Chiu/Dropbox/Emacs/Org")
      (setq org-mobile-directory "C:/Users/Marco.Chiu/Dropbox/Apps/MobileOrg"))

    (defvar path_inbox (concat org-directory "/inbox.org"))
    (defvar path_home (concat org-directory "/home.org"))
    (defvar path_work (concat org-directory "/work.org"))
    (defvar path_personal (concat org-directory "/personal.org"))

    (setq org-default-notes-file path_inbox)
    (setq org-mobile-inbox-for-pull path_inbox)
    (setq org-mobile-files (list path_home path_work path_personal))
    (setq org-agenda-files (list path_home path_work path_personal))

    (setq org-capture-templates
          '(("t" "Todo-Personal" entry (file+headline path_personal "Personal Tasks:") "* TODO %?\n")
            ("h" "Todo-Home" entry (file+headline path_home "Home Tasks:") "* TODO %?\n")
            ("w" "Todo-Work" entry (file+headline path_work "Work Tasks:") "* TODO %?\n")
            ("j" "Todo" entry (file+headline path_inbox "Tasks" ) "* TODO %?\n")
            ))

    (setq org-refile-targets '((path_home :maxlevel . 1)
                               (path_work :maxlevel . 1)
                               (path_personal :maxlevel . 1)))

  (when *is-a-win*
    (defvar path_sha1sum (concat user-emacs-directory "packages/sha1sum.exe"))
    (setq org-mobile-checksum-binary path_sha1sum))
#+END_SRC

** Insert image from url
#+BEGIN_SRC emacs-lisp
(require 'url)

(defun insert-image-from-url (&optional url)
  (interactive)
  (unless url (setq url (url-get-url-at-point)))
  (unless url
    (error "Couldn't find URL."))
  (let ((buffer (url-retrieve-synchronously url)))
    (unwind-protect
         (let ((data (with-current-buffer buffer
                       (goto-char (point-min))
                       (search-forward "\n\n")
                       (buffer-substring (point) (point-max)))))
           (insert-image (create-image data nil t)))
      (kill-buffer buffer))))
#+END_SRC

** Babel
 We can tell babel to ignore a code by giving the option =:tangle no= to the source code. The following is an example. You can view the actual code by opening this file in Emacs.

#+BEGIN_SRC emacs-lisp :tangle no
(message "I don't exist!")
#+END_SRC


#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (calc . t)
     (shell . t)
     (python . t)
     ;(R . t)
     ))
#+END_SRC

** LaTex
#+BEGIN_SRC emacs-lisp :tangle no
  (when *is-a-mac*
    (add-to-list 'org-latex-classes
                 '("bjmarticle"
                   "\\documentclass{article}
                    \\usepackage[utf8]{inputenc}
                    \\usepackage[T1]{fontenc}
                    \\usepackage{graphicx}
                    \\usepackage{longtable}
                    \\usepackage{hyperref}
                    \\usepackage{natbib}
                    \\usepackage{amssymb}
                    \\usepackage{amsmath}
                    \\usepackage{geometry}
                    \\geometry{a4paper,left=2.5cm,top=2cm,right=2.5cm,bottom=2cm,marginparsep=7pt, marginparwidth=.6in}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    )
#+END_SRC

** Useful User Define Function
*** screenshot
#+BEGIN_SRC emacs-lisp
  ;;; https://emacs-china.org/t/org-mode/79
  (defun my-org-screenshot ()
    "Take a screenshot into a time stamped unique-named file in the
  same directory as the org-buffer and insert a link to this file."
    (interactive)
    (org-display-inline-images)

    (setq filename
          (concat
           (make-temp-name
            (concat (file-name-directory (buffer-file-name))
                    "/imgs/"
                    (format-time-string "%Y%m%d_%H%M%S_")) ) ".png"))
    (unless (file-exists-p (file-name-directory filename))
      (make-directory (file-name-directory filename)))
                                          ; take screenshot
    (if (eq system-type 'darwin)
        (progn
          (call-process-shell-command "screencapture" nil nil nil nil " -s " (concat
                                                                              "\"" filename "\"" ))
          (call-process-shell-command "convert" nil nil nil nil (concat "\"" filename "\" -resize  \"50%\"" ) (concat "\"" filename "\"" ))
          ))

    (setq relative-dir (concat "./imgs/" (file-name-nondirectory filename)))
    (if (file-exists-p filename)
        (insert (concat "[[file:" relative-dir "]]")))
    (org-display-inline-images)
    )
#+END_SRC

*** Drag file to org mode
#+BEGIN_SRC emacs-lisp
  ;; drag file to org mode
  ;; http://kitchingroup.cheme.cmu.edu/blog/2015/07/10/Drag-images-and-files-onto-org-mode-and-insert-a-link-to-them/
  (defun my-dnd-func (event)
    (interactive "e")
    (goto-char (nth 1 (event-start event)))
    (x-focus-frame nil)
    (let* ((payload (car (last event)))
           (type (car payload))
           (fname (cadr payload))
           (img-regexp "\\(png\\|jp[e]?g\\|svg\\)\\>"))
      (cond
       ;; insert image link
       ((and  (eq 'drag-n-drop (car event))
              (eq 'file type)
              (string-match img-regexp fname))
        (dired-copy-file fname (format "./imgs/%s" (file-name-nondirectory fname)) t)
        (insert "#+ATTR_HTML: :width 100%\n")
        (insert (format "[[%s]]" (format "./imgs/%s" (file-name-nondirectory fname))))
        (org-display-inline-images t t))
       ;; regular drag and drop on file
       (t
        (error "I am not equipped for dnd on %s" payload)))))
#+END_SRC
* Useful tools
** ispell


#+BEGIN_SRC emacs-lisp
  (defun ispell-word-then-abbrev (p)
    "Call `ispell-word'. Then create an abbrev for the correction made.
  With prefix P, create local abbrev. Otherwise it will be global."
    (interactive "P")
    (let ((before (downcase (or (thing-at-point 'word) "")))
          after)
      (call-interactively 'ispell-word)
      (setq after (downcase (or (thing-at-point 'word) "")))
      (unless (string= after before)
        (define-abbrev
          (if p local-abbrev-table global-abbrev-table) before after))
        (message "\"%s\" now expands to \"%s\" %sally."
                 before after (if p "loc" "glob"))))

  (define-key ctl-x-map (kbd "C-i") 'ispell-word-then-abbrev)
  (when *is-a-win*
     (add-to-list 'exec-path "C:/Program Files (x86)/Aspell/bin/"))

  (setq ispell-personal-dictionary "~/.emacs.d/dictionary/")
  (setq save-abbrevs t)
  (setq-default abbrev-mode t)
  (setq ispell-program-name "aspell")
#+END_SRC

** Youdao Dictionary

#+BEGIN_SRC emacs-lisp
(use-package youdao-dictionary
  :ensure t
  :bind ("C-c d" . youdao-dictionary-search-at-point)
  :init (setq url-automatic-caching t))
#+END_SRC

** Try
 Try Emacs packages without installing them.

#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC
** Pandoc-mode
#+BEGIN_SRC emacs-lisp
(use-package pandoc-mode
  :ensure t)
#+END_SRC
** wttr.in
#+BEGIN_SRC emacs-lisp
  (use-package wttrin
    :ensure t
    :commands (wttrin)
    :init
    (setq wttrin-default-cities '("Tsuen Wan"
                                  "Tin Shui Wai"
                                  "Hong Kong"))
    (setq wttrin-default-accept-language '("Accept-Language" . "zh-TW")))
#+END_SRC
** pdf-tools
#+BEGIN_SRC emacs-lisp
  ;;; Install epdfinfo via 'brew install pdf-tools' and then install the
  ;;; pdf-tools elisp via the use-package below. To upgrade the epdfinfo
  ;;; server, just do 'brew upgrade pdf-tools' prior to upgrading to newest
  ;;; pdf-tools package using Emacs package system. If things get messed
  ;;; up, just do 'brew uninstall pdf-tools', wipe out the elpa
  ;;; pdf-tools package and reinstall both as at the start.
  (when *is-a-mac*
    (use-package pdf-tools
      :ensure t
      :config
      (custom-set-variables
       '(pdf-tools-handle-upgrades nil)) ; Use brew upgrade pdf-tools instead.
      (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo"))
    (pdf-tools-install))
#+END_SRC
** Org-pdfview
org-link support for pdf-view-mode
#+BEGIN_SRC emacs-lisp
  (use-package org-pdfview
    :ensure t)
#+END_SRC
** Google-this
Search selected region in google.
#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :ensure t
    :config
    (google-this-mode 1))
#+END_SRC
** Stack Overflow
SX is a full stack overflow client within Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package sx
    :ensure t
    :config
    (bind-keys :prefix "C-c s"
               :prefix-map my-sx-map
               :prefix-docstring "Global keymap for SX."
               ("q" . sx-tab-all-questions)
               ("i" . sx-inbox)
               ("o" . sx-open-link)
               ("u" . sx-tab-unanswered-my-tags)
               ("a" . sx-ask)
               ("s" . sx-search)))
#+END_SRC

** auto-package-update
Automatically update Emacs packages.
#+BEGIN_SRC emacs-lisp
    (use-package auto-package-update
      :ensure t
      :config
      (setq auto-package-update-delete-old-versions t
            auto-package-update-interval 30
            auto-package-update-prompt-before-update t)
      (auto-package-update-maybe))
#+END_SRC
** Typit
Typing game for Emacs similar to the tests on 10 fast fingers.
#+BEGIN_SRC emacs-lisp
  (use-package typit
    :ensure t)
#+END_SRC
* Personal Keymap
